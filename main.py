import os
import requests
from fastapi import FastAPI
from pydantic import BaseModel
from typing import Optional

OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
MODEL_NAME = "openai/gpt-3.5-turbo"

app = FastAPI()

# –ö–æ–Ω—Ç–µ–∫—Å—Ç—ã –ø–æ session_id
sessions = {}

# –†–µ–∂–∏–º—ã –∫–æ—Ç–∞
MODES = {
    "–≤–µ—Å—ë–ª—ã–π": "üò∫ –ú—è—É! –° —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞—é:",
    "–≤–æ—Ä—á–ª–∏–≤—ã–π": "üòæ –ù—É –ª–∞–¥–Ω–æ... –°–ª—É—à–∞–π –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ:",
    "—Å–æ–Ω–Ω—ã–π": "üò¥ –ú—Ä—Ä... –°–µ–π—á–∞—Å –ø–æ–ø—Ä–æ–±—É—é —Å–∫–∞–∑–∞—Ç—å...",
    "—É—á—ë–Ω—ã–π": "üé© –ü–æ–∑–≤–æ–ª—å –ø—Ä–æ–∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å:",
    "–±–∞–∑–æ–≤—ã–π": "–ú—è—É! –ö–æ—Ç –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç:"
}

STOP_COMMANDS = ["–ø–æ–∫–∞", "—Å—Ç–æ–ø", "—Ö–≤–∞—Ç–∏—Ç", "–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è", "–≤—ã—Ö–æ–¥", "—Å–ø–∞—Å–∏–±–æ"]

class AliceRequest(BaseModel):
    request: dict
    session: dict
    version: str

def build_tts(text: str, mode: str, command: str) -> str:
    prefix = MODES.get(mode, MODES["–±–∞–∑–æ–≤—ã–π"])
    repeat = f"–¢—ã —Å–ø—Ä–æ—Å–∏–ª: ¬´{command}¬ª. "
    return f"{repeat}{prefix} {text}"

@app.post("/")
async def handle_request(alice_request: AliceRequest):
    command = alice_request.request.get("command", "").strip().lower()
    session_id = alice_request.session.get("session_id")
    user_id = alice_request.session.get("user_id")
    session_key = f"{user_id}_{session_id}"

    if session_key not in sessions:
        sessions[session_key] = {"mode": "–±–∞–∑–æ–≤—ã–π", "history": []}

    current_mode = sessions[session_key]["mode"]

    if any(word in command for word in STOP_COMMANDS):
        return {
            "version": alice_request.version,
            "response": {
                "text": "–ú—è—É! –î–æ –≤—Å—Ç—Ä–µ—á–∏, —á–µ–ª–æ–≤–µ–∫!",
                "tts": "–ú—è—É! –î–æ –≤—Å—Ç—Ä–µ—á–∏, —á–µ–ª–æ–≤–µ–∫!",
                "end_session": True
            }
        }

    for mode in MODES:
        if f"—Ä–µ–∂–∏–º {mode}" in command or f"–≤–∫–ª—é—á–∏ {mode}" in command:
            sessions[session_key]["mode"] = mode
            return {
                "version": alice_request.version,
                "response": {
                    "text": f"–ö–æ—Ç –ø–µ—Ä–µ–∫–ª—é—á–∏–ª—Å—è –≤ —Ä–µ–∂–∏–º ¬´{mode}¬ª.",
                    "tts": f"–¢–µ–ø–µ—Ä—å —è –≥–æ–≤–æ—Ä—é –∫–∞–∫ {mode} –∫–æ—Ç.",
                    "end_session": False
                }
            }

    if not command:
        text = "–ü—Ä–∏–≤–µ—Ç! –ú–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, –º—É—Ä—Ä."
    else:
        try:
            history = sessions[session_key]["history"][-4:]  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ä–µ–ø–ª–∏–∫–∏
            messages = [{"role": "system", "content": "–û—Ç–≤–µ—á–∞–π –∫–∞–∫ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∫–æ—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç."}]
            for turn in history:
                messages.append({"role": "user", "content": turn["user"]})
                messages.append({"role": "assistant", "content": turn["bot"]})
            messages.append({"role": "user", "content": command})

            headers = {
                "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                "Content-Type": "application/json"
            }
            data = {
                "model": MODEL_NAME,
                "messages": messages,
                "max_tokens": 150,
                "temperature": 0.7
            }
            response = requests.post("https://openrouter.ai/api/v1/chat/completions", headers=headers, json=data)
            response.raise_for_status()
            text = response.json()["choices"][0]["message"]["content"].strip()

            sessions[session_key]["history"].append({"user": command, "bot": text})

        except Exception:
            text = "–ú—è—É... –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑."

    json_response = {
        "version": alice_request.version,
        "response": {
            "text": text,
            "tts": build_tts(text, sessions[session_key]["mode"], command),
            "end_session": False
        }
    }

    print("–û—Ç–≤–µ—Ç –ê–ª–∏—Å–µ:", json_response)
    return json_response

