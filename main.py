
import os
import json
import requests
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse

app = FastAPI()

SESSIONS_FILE = "sessions.json"
if os.path.exists(SESSIONS_FILE):
    with open(SESSIONS_FILE, "r", encoding="utf-8") as f:
        sessions = json.load(f)
else:
    sessions = {}

def save_sessions():
    with open(SESSIONS_FILE, "w", encoding="utf-8") as f:
        json.dump(sessions, f, ensure_ascii=False, indent=2)

def get_level(points):
    if points >= 30:
        return "–∫–æ—Ç–æ-–º–∞–≥–∏—Å—Ç—Ä üßô‚Äç‚ôÇÔ∏è"
    elif points >= 20:
        return "–∫–æ—Ç–æ-–º–∞—Å—Ç–µ—Ä"
    elif points >= 10:
        return "–∫–æ—Ç–æ-—É—á–µ–Ω–∏–∫"
    else:
        return "–∫–æ—Ç—ë–Ω–æ–∫"

def ask_openai(question: str) -> str:
    api_url = os.getenv("OPENAI_PROXY_URL", "https://openrouter.ai/api/v1/chat/completions")
    api_key = os.getenv("OPENAI_API_KEY", "")
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json",
    }
    data = {
        "model": "gpt-3.5-turbo",
        "messages": [{"role": "user", "content": question}],
        "temperature": 0.7,
    }

    try:
        r = requests.post(api_url, headers=headers, json=data, timeout=10)
        r.raise_for_status()
        return r.json()["choices"][0]["message"]["content"].strip()
    except Exception as e:
        return f"–ú—è—É? –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... ({e})"

@app.post("/")
async def handle(request: Request):
    event = await request.json()
    command = event.get("request", {}).get("command", "").lower().strip()
    session_key = event.get("session", {}).get("user_id", "default")

    if session_key not in sessions:
        sessions[session_key] = {"points": 0}
        save_sessions()

    response_text = "–ú—è—É! –ö–æ—Ç –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç: –ü—Ä–∏–≤–µ—Ç! –ú–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, –º—É—Ä—Ä."

    if not command:
        response_text = "–ú—è—É! –ö–æ—Ç –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç: –ü—Ä–∏–≤–µ—Ç! –ú–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, –º—É—Ä—Ä."
    elif "—Å–ø–∞—Å–∏–±–æ" in command:
        points = sessions[session_key].get("points", 0) + 1
        sessions[session_key]["points"] = points
        save_sessions()
        response_text = f"–ú—É—Ä-—Ä! –û–±–æ–∂–∞—é –≤–µ–∂–ª–∏–≤—ã—Ö –ª—é–¥–µ–π! –¢–µ–±–µ +1 –±–∞–ª–ª! –£ —Ç–µ–±—è —Ç–µ–ø–µ—Ä—å {points} –±–∞–ª–ª–æ–≤."
    elif "–±–∞–ª–ª–æ–≤" in command or "–æ—á–∫–∏" in command or "—Å–∫–æ–ª—å–∫–æ" in command:
        points = sessions[session_key].get("points", 0)
        level = get_level(points)
        response_text = f"–£ —Ç–µ–±—è {points} –±–∞–ª–ª–æ–≤. –¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å: {level}."
    elif "—Å—é—Ä–ø—Ä–∏–∑" in command:
        points = sessions[session_key].get("points", 0)
        if points >= 5:
            sessions[session_key]["points"] = points - 5
            save_sessions()
            response_text = "–¢—ã –ø–æ–ª—É—á–∏–ª –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é —Ä—ã–±–∫—É –∏ –æ–±–Ω–∏–º–∞—à–∫–∏ –æ—Ç –∫–æ—Ç–∞! -5 –±–∞–ª–ª–æ–≤ —Å–ø–∏—Å–∞–Ω–æ."
        else:
            response_text = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –¥–ª—è —Å—é—Ä–ø—Ä–∏–∑–∞. –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 5."
    else:
        response_text = ask_openai(command)

    return JSONResponse({
        "version": "1.0",
        "response": {
            "text": response_text,
            "tts": response_text,
            "end_session": False
        }
    })
